import logging

from aiogram import Router, F, Bot
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

import bot.keyboards.user as kb
from bot.misc.states import RegistrationState
from infrastructure.database.models import User
from infrastructure.database.repo.requests import RequestsRepo
from infrastructure.vntu_timetable_api import VntuTimetableApi

user_router = Router()


@user_router.message(CommandStart())
async def user_start(message: Message, state: FSMContext, user: User):
    await state.clear()
    if user.faculty_id:
        await message.answer(
            text=f"–í—ñ—Ç–∞—é, {message.from_user.first_name}!\n\n"
            f" > –ì—Ä—É–ø–∞: {user.group_name}\n"
            + (f" > –ü—ñ–¥–≥—Ä—É–ø–∞: {user.subgroup}" if user.subgroup else ""),
            reply_markup=kb.start_keyboard(reg=True),
        )
    else:
        await message.answer(
            text=f"–í—ñ—Ç–∞—é, {message.from_user.first_name}!",
            reply_markup=kb.start_keyboard(reg=False),
        )


@user_router.callback_query(F.data == "reg_or_upd")
async def reg_or_upd_data(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(text="–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –≤–∞—à–æ—ó –≥—Ä—É–ø–∏:")
    await state.set_state(RegistrationState.group)


@user_router.message(RegistrationState.group)
async def handle_group_msg(message: Message, state: FSMContext, api: VntuTimetableApi):
    result, faculties = await api.get_faculties()
    if result != 200:
        await message.answer(
            "–£–ø—Å... –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–Ω–∏—Ö –∑ APIüòñ\n–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ..."
        )
        await state.clear()
        return

    for faculty in faculties.get("data"):
        for group in faculty["groups"]:
            if group["name"].upper() == message.text.upper():
                await state.set_data(
                    {
                        "faculty_id": faculty["id"],
                        "group_id": group["id"],
                        "group_name": group["name"],
                    }
                )
                await message.answer(
                    text="–û–±–µ—Ä—ñ—Ç—å –≤–∞—à—É –ø—ñ–¥–≥—Ä—É–ø—É:", reply_markup=kb.subgroups_keyboard()
                )
                break

    await state.set_state(RegistrationState.subgroup)


@user_router.callback_query(RegistrationState.subgroup, F.data.in_(["0", "1", "2"]))
async def handle_subgroup_callback(
    callback: CallbackQuery, state: FSMContext, repo: RequestsRepo, bot: Bot
):
    bot_info = await bot.get_me()
    data = await state.get_data()
    try:
        await repo.users.update_user_faculty_and_group(
            user_id=callback.from_user.id,
            faculty_id=data["faculty_id"],
            group_id=data["group_id"],
            group_name=data["group_name"],
            subgroup=int(callback.data),
        )
        await callback.message.edit_text(
            text="–í–∞—à—ñ –¥–∞–Ω–Ω—ñ –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!\n\n"
            f"–í–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥ –¥–ª—è <b>{data['group_name']}</b> —É "
            f"<a href='https://t.me/{bot_info.username}/timetable?startapp={data['faculty_id']}_{data['group_id']}'>web app</a>"
            f" –∞–±–æ —è–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–∏ –∫–æ–º–∞–Ω–¥—ñ <i>/inline</i>",
            reply_markup=kb.share_button(),
        )
    except Exception as e:
        logging.error(e)
        await callback.message.edit_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –¥–∞–Ω–Ω–∏—Öü§ï")
    await state.clear()
